#!/usr/bin/env python3
import argparse
import common
import numpy as np
import pandas as pd
import scipy.stats
import sys

np.seterr(all='raise')

parser = argparse.ArgumentParser(description='determine if we have unknown erratic soak experiments')
parser.add_argument('--variant', type=str, default='baseline', help='the variant to examine for erratic behavior')
parser.add_argument('--capture-dir', type=str, help='the directory to search for capture files')
parser.add_argument('--vector-cpus', type=int, help='the total number of CPUs given to vector during the experiment')
parser.add_argument('--warmup-seconds', type=int, default=30, help='the number of seconds to treat as warmup')
parser.add_argument('--coefficient-of-variation-limit', type=float, default=0.05, help='the acceptable limit +/- for the ratio of stdev to mean, default 0.05')
parser.add_argument('--outlier-ratio-limit', type=float, default=0.03, help='the acceptable outlier percentage threshold, default 0.03')
args = parser.parse_args()

bytes_written = pd.concat(common.compute_throughput(
    common.open_captures(args.capture_dir,
                         'bytes_written',
                         unwanted_labels=['metric_name', 'metric_kind', 'target']),
    cpus = args.vector_cpus))
# Skip past warmup seconds samples, allowing for vector warmup to not factor
# into judgement.
bytes_written = bytes_written[(bytes_written.fetch_index > args.warmup_seconds) &
                              (bytes_written.throughput > 0.0) &
                              (bytes_written.variant == args.variant)]

results = []
for exp in bytes_written.experiment.unique():
    experiment_samples = bytes_written[bytes_written.experiment == exp]
    for run_id in experiment_samples.run_id.unique():
        samples = experiment_samples.loc[experiment_samples.run_id == run_id]

        mean = samples.throughput.mean()
        stdev = samples.throughput.std()
        cov = scipy.stats.variation(samples.throughput)
        outliers = common.total_outliers(samples)
        outlier_ratio = outliers / len(samples)

        results.append({
            'experiment': exp,
            'run_id': run_id,
            'mean': mean,
            'stdev': stdev,
            'coefficient of variation': cov,
            'cov violation': abs(cov) > args.coefficient_of_variation_limit,
            'outliers': outliers,
            'outlier ratio': outlier_ratio,
            'outlier violation': outlier_ratio > args.outlier_ratio_limit,
        })

results = pd.DataFrame.from_records(results)
results['mean'] = results['mean'].apply(common.human_bytes)
results['stdev'] = results['stdev'].apply(common.human_bytes)

erratic_violation = results[(results['outlier violation'] == True) & (results['cov violation'] == True)]
print(results.to_markdown(index=False, tablefmt='github'))

if len(erratic_violation) > 0:
    print("Erratic experiments detected beyond thresholds.")
    sys.exit(1)
