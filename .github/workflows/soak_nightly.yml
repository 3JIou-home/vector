# Nightly soak tests
#
# This workflow runs our nightly 'soak' tests. These are not regression control
# mechanisms in the same way as the PR-focused soak tests but are, instead, ways
# of gathering information about long-term changes, meta-results about stability
# etc.
name: Soak Nightlies

# TODO this needs to be rigged up for a nightly run
on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "rfcs/**"
      - "website/**"

jobs:
  cancel-previous:
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    if: |
      github.ref != 'refs/heads/master' &&
      ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
          all_but_latest: true # can cancel workflows scheduled later

  compute-soak-meta:
    name: Compute metadata for soaks
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04
    outputs:
      baseline-sha: ${{ steps.baseline.outputs.BASELINE_SHA }}
      vector-cpus: ${{ steps.system.outputs.VECTOR_CPUS }}
      soak-cpus: ${{ steps.system.outputs.SOAK_CPUS }}
      soak-memory: ${{ steps.system.outputs.SOAK_MEMORY }}
    steps:
      - uses: actions/checkout@v2.3.5

      - name: Setup baseline variables
        id: baseline
        run: |
          pushd vector
          export BASELINE_SHA=$(git rev-parse HEAD)
          popd

          echo "::set-output name=BASELINE_TAG::${BASELINE_TAG}"

      - name: Setup system details
        id: system
        run: |
          export SOAK_CPUS="7"
          export SOAK_MEMORY="30g"
          export VECTOR_CPUS="4"

          echo "soak cpus total: ${SOAK_CPUS}"
          echo "soak memory total: ${SOAK_MEMORY}"
          echo "vector cpus: ${VECTOR_CPUS}"

          echo "::set-output name=SOAK_CPUS::${SOAK_CPUS}"
          echo "::set-output name=SOAK_MEMORY::${SOAK_MEMORY}"
          echo "::set-output name=VECTOR_CPUS::${VECTOR_CPUS}"

  compute-test-plan:
    name: Compute soak test plan
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04
    needs: [compute-soak-meta]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - uses: actions/github-script@v5
        id: set-matrix
        with:
          script: |
            const fs = require('fs')
            target = fs.readdirSync('soaks/tests') // read names of directories in soaks/tests into an array

            // Create the matrix that will be used as the strategy for soak test image builds and experiments
            //
            // Each field of this object has an array of elements that will be
            // cartesian producted across the others to generate the full list of
            // jobs to run. For example, the first job might have the values:
            // { target: "fluent_remap_aws_firehose", replica: [1] }
            const matrix = {
              target: target,     // run each experiment
              replica: [1, 2, 3, 4, 5, 6], // run six replicas of each experiment
            }

            // export this variable to be available to other github steps
            core.setOutput('matrix', matrix)
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(steps.set-matrix.outputs.matrix) }}
        run: echo "$MATRIX_CONTEXT"

  build-image:
    name: Build baseline 'soak-vector' container
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: [self-hosted, linux, x64, soak_builder]
    needs: [compute-soak-meta]
    steps:
      - uses: colpal/actions-clean@v1

      - uses: actions/checkout@v2.3.5

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1.12.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681
        with:
          flavor: |
            latest=false
            prefix=
            suffix=
          images: ghcr.io/${{ github.repository }}/soak-vector
          tags: type=raw, value=${{ needs.compute-soak-meta.outputs.baseline-sha }}

      - name: Build and push 'soak-vector' image
        uses: docker/build-push-action@v2.8.0
        with:
          context: vector/
          file: soaks/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  run-experiments:
    name: Soak (${{ matrix.target }}) - baseline - replica ${{ matrix.replica }}
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: [self-hosted, linux, x64, soak]
    needs: [compute-soak-meta, compute-test-plan, build-image-baseline]
    strategy:
      matrix: ${{ fromJson(needs.compute-test-plan.outputs.matrix) }}
    steps:
      - uses: colpal/actions-clean@v1

      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: Run baseline experiment
        run: |
          rm -rf /tmp/${{ github.event.number }}-${{ github.run_attempt }}/
          mkdir -p /tmp/${{ github.event.number }}-${{ github.run_attempt }}/${{ matrix.target }}/
          ./soaks/bin/soak_one.sh --soak ${{ matrix.target }} \
                                  --local-image "false" \
                                  --variant "baseline" \
                                  --tag ${{ needs.compute-soak-meta.outputs.baseline-sha }} \
                                  --cpus ${{ needs.compute-soak-meta.outputs.soak-cpus }} \
                                  --memory ${{ needs.compute-soak-meta.outputs.soak-memory }} \
                                  --vector-cpus ${{ needs.compute-soak-meta.outputs.vector-cpus }} \
                                  --capture-dir /tmp/${{ github.event.number }}-${{ github.run_attempt }} \
                                  --warmup-seconds 30

      - name: Upload timing captures
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.event.number }}-${{ github.run_attempt }}-${{ matrix.target }}-replica_${{ matrix.replica }}-baseline
          path: /tmp/${{ github.event.number }}-${{ github.run_attempt }}/${{ matrix.target }}/baseline.captures

      - name: Clear up unused images
        run: |
          minikube delete --all --purge
          docker system prune --all --volumes --force

  detect-erratic:
    name: Erratic detection - baseline
    if: ${{ github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-20.04
    needs:
      - compute-soak-meta
      - soak-baseline

    steps:
      - name: Set up Python3
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.1"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scipy==1.7.* pandas==1.3.* tabulate==0.8.*

      - name: Check out the repo
        uses: actions/checkout@v2.4.0

      - name: Download captures artifact
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.event.number }}-${{ github.run_attempt }}-captures/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ${{ github.event.number }}-${{ github.run_attempt }}-captures/

      - name: Detect erratic
        run: |
          ./soaks/bin/detect_erratic --capture-dir ${{ github.event.number }}-${{ github.run_attempt }}-captures/ \
                                     --vector-cpus ${{ needs.compute-soak-meta.outputs.vector-cpus }} \
                                     --warmup-seconds 30 \
                                     --outlier-ratio-limit 0.03 \
                                     --variant baseline
